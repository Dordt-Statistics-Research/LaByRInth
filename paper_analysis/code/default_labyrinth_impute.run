#!/usr/bin/env Rscript

## Copyright 2017 Jason Vander Woude and Nathan Ryder
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.


##               __          ____        ____  _____
##              / /         / __ \      / __ \/_  _/
##             / /   ____  / /_/ /_  __/ /_/ / / / __   __________  __
##            / /   / _  \/ _  _/\ \/ / _  _/ / / /  | / /_  __/ /_/ /
##           / /___/ /_/ / /_\ \  \  / / \ \_/ /_/ /||/ / / / / __  /
##          /_____/_/ /_/______/  /_/_/  /_/____/_/ |__/ /_/ /_/ /_/
##
##                  L O W - C O V E R A G E   B I A L L E L I C
##                    R - P A C K A G E   I M P U T A T I O N
##


source("./data_definitions.R")
source("./labyrinth_analysis.R")
source("../../labyrinth.R")

args            <- commandArgs(trailingOnly=TRUE)
dataset         <- args[1]

in.file         <- masked.file(dataset)

parents         <- all.parents[[dataset]]
generation      <- generations[dataset]

geno.errs       <- c(0.001, 0.01, 0.1)
parent.het      <- 0.01

use.fwd.bkwd    <- TRUE
calc.posteriors <- TRUE

parallel        <- TRUE
cores           <- 25

if (! dir.exists(imputed.dir(dataset))) {
    dir.create(imputed.dir(dataset), recursive=TRUE)
}

for (i in seq_along(geno.errs)) {
    message("Beginning full imputation of the dataset ", dataset,
            " with genotype error ", geno.errs[i])

    par.file        <- parental.file(dataset, config=i)
    out.file        <- imputed.file(dataset, parental.config=i, progeny.config=1)

    geno.err        <- geno.errs[i]

    if (! file.exists(par.file)) {
        LabyrinthImputeParents(vcf               = in.file,
                               parents           = parents,
                               generation        = generation,
                               out.file          = par.file,
                               geno.err          = geno.err,
                               parent.het        = parent.het,
                               parallel          = parallel,
                               cores             = cores)
    } else {
        message("Parental file ", par.file, " already exists and will be used")
    }

    if (! file.exists(out.file)) {
        LabyrinthImputeProgeny(parental          = readRDS(par.file),
                               out.file          = out.file,
                               use.fwd.bkwd      = use.fwd.bkwd,
                               calc.posteriors   = use.fwd.bkwd,
                               viterbi.threshold = NA,  # irrelevant,
                               parallel          = parallel,
                               cores             = cores)
    } else {
        message("Imputed file ", out.file, " already exists and will be used")
    }

}

original <- read.vcfR(filtered.file(dataset))
masked <- read.vcfR(in.file)

analysis.df <- do.call(rbind, lapply(seq_along(geno.errs), function(i) {
    parental.result <- readRDS(parental.file(dataset))
    imputed <- read.vcfR(imputed.file(dataset, parental.config=i, progeny.config=1))
    good.imputed <- LabyrinthUncall(vcf = imputed, min.posterior = 0.9)

    rbind(
        LBImputeAnalyze(original,
                        masked,
                        imputed,
                        parental.result$read.err,
                        parental.result$geno.err,
                        NA,
                        "full"),

        LBImputeAnalyze(original,
                        masked,
                        good.imputed,
                        parental.result$read.err,
                        parental.result$geno.err,
                        NA,
                        ">90%")
    )
}))

write.csv(analysis.df, analysis.file(dataset), row.names = FALSE)
